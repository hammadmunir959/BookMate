# Unified RAG Microservice - Production Docker Compose Configuration
# Optimized for performance, monitoring, and scalability

version: '3.8'

services:
  # Main RAG Service
  rag-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-1.0.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    container_name: BookMate
    hostname: rag-service
    ports:
      - "${HOST_PORT:-8000}:8000"
    environment:
      # API Configuration
      - GROQ_API_KEY=${GROQ_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      
      # Service Configuration
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-false}
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=${WORKERS:-1}
      
      # Database Configuration
      - CHROMA_DB_PATH=/app/data/chroma_db
      - SQLITE_DB_PATH=/app/data/sqlite/rag.db
      
      # Cache Configuration
      - EMBEDDING_CACHE_PATH=/app/data/cache/embeddings
      - RESPONSE_CACHE_PATH=/app/data/cache/responses
      - TEMP_CACHE_PATH=/app/data/cache/temp
      
      # Performance Configuration
      - OMP_NUM_THREADS=1
      - MKL_NUM_THREADS=1
      - OPENBLAS_NUM_THREADS=1
      - MALLOC_ARENA_MAX=2
      
      # Security Configuration
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      
    volumes:
      # Persistent data storage
      - rag-data:/app/data
      # Optional: Mount logs for external monitoring
      - ./logs:/app/data/logs:rw
      # Optional: Mount config for external configuration
      - ./config:/app/config:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 90s
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '${CPU_LIMIT:-2.0}'
          memory: ${MEMORY_LIMIT:-4G}
        reservations:
          cpus: '${CPU_RESERVATION:-0.5}'
          memory: ${MEMORY_RESERVATION:-1G}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535

  # Optional: Redis for caching (if needed)
  redis:
    image: redis:7-alpine
    container_name: rag-redis
    hostname: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - rag-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    profiles:
      - redis

  # Optional: Monitoring with Prometheus (if needed)
  prometheus:
    image: prom/prometheus:latest
    container_name: rag-prometheus
    hostname: prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - rag-network
    profiles:
      - monitoring

  # Optional: Grafana for visualization (if needed)
  grafana:
    image: grafana/grafana:latest
    container_name: rag-grafana
    hostname: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - rag-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Networks
networks:
  rag-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: rag-br0

# Volumes
volumes:
  # Persistent data storage
  rag-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  # Redis data
  redis-data:
    driver: local
  
  # Prometheus data
  prometheus-data:
    driver: local
  
  # Grafana data
  grafana-data:
    driver: local
